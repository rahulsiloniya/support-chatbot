URL: https://docs.mparticle.com/developers/client-sdks/android/media/

DOCSDOCSHomeGuidesDevelopersIntegrationsChangelogSign UpDocumentationDevelopersAPI ReferencesPlatform APIPlatform API OverviewAccountsAppsAudiencesCalculated AttributesData PointsFeedsField TransformationsServicesUsersWorkspacesData Subject Request APIData Subject Request API Version 1 and 2Data Subject Request API Version 3Warehouse Sync APIWarehouse Sync API OverviewWarehouse Sync API TutorialWarehouse Sync API ReferenceData MappingWarehouse Sync SQL ReferenceWarehouse Sync Troubleshooting GuideComposeIDWarehouse Sync API v2 MigrationCalculated Attributes Seeding APIBulk Profile Deletion API ReferenceCustom Access Roles APIData Planning APIGroup Identity API ReferencePixel ServiceProfile APIEvents APImParticle JSON Schema ReferenceIDSyncClient SDKsAMPAMP SDKAndroidInitializationConfigurationNetwork Security ConfigurationEvent TrackingUser AttributesIDSyncScreen EventsCommerce EventsLocation TrackingMediaKitsApplication State and Session ManagementData Privacy ControlsError TrackingOpt OutPush NotificationsWebView IntegrationLoggerPreventing Blocked HTTP Traffic with CNAMELinting Data PlansTroubleshooting the Android SDKAPI ReferenceUpgrade to Version 5CordovaCordova PluginIdentityDirect Url RoutingDirect URL Routing FAQWebAndroidiOSFlutterGetting StartedUsageAPI ReferenceiOSInitializationConfigurationEvent TrackingUser AttributesIDSyncScreen TrackingCommerce EventsLocation TrackingMediaKitsApplication State and Session ManagementData Privacy ControlsError TrackingOpt OutPush NotificationsWebview IntegrationUpload FrequencyApp ExtensionsPreventing Blocked HTTP Traffic with CNAMELinting Data PlansTroubleshooting iOS SDKSocial NetworksiOS 14 GuideiOS 15 FAQiOS 16 FAQiOS 17 FAQiOS 18 FAQAPI ReferenceUpgrade to Version 7RokuGetting StartedIdentityMediaReact NativeGetting StartedIdentityUnityUpload FrequencyGetting StartedOpt OutInitialize the SDKEvent TrackingCommerce TrackingError TrackingScreen TrackingIdentityLocation TrackingSession ManagementXboxGetting StartedIdentityWebInitializationConfigurationContent Security PolicyEvent TrackingUser AttributesIDSyncPage View TrackingCommerce EventsLocation TrackingMediaKitsApplication State and Session ManagementData Privacy ControlsError TrackingOpt OutCustom LoggerPersistenceNative Web ViewsSelf-HostingMultiple InstancesWeb SDK via Google Tag ManagerPreventing Blocked HTTP Traffic with CNAMEFacebook Instant ArticlesTroubleshooting the Web SDKBrowser CompatibilityLinting Data PlansAPI ReferenceUpgrade to Version 2 of the SDKXamarinGetting StartedIdentityWebAlexaMedia SDKsAndroidiOSWebToolsmParticle Command Line InterfaceLinting ToolsSmartypeServer SDKsNode SDKGo SDKPython SDKRuby SDKJava SDKQuickstartAndroidOverviewStep 1. Create an inputStep 2. Verify your inputStep 3. Set up your outputStep 4. Create a connectionStep 5. Verify your connectionStep 6. Track eventsStep 7. Track user dataStep 8. Create a data planStep 9. Test your local appHTTP Quick StartStep 1. Create an inputStep 2. Create an outputStep 3. Verify outputiOS Quick StartOverviewStep 1. Create an inputStep 2. Verify your inputStep 3. Set up your outputStep 4. Create a connectionStep 5. Verify your connectionStep 6. Track eventsStep 7. Track user dataStep 8. Create a data planJava Quick StartStep 1. Create an inputStep 2. Create an outputStep 3. Verify outputNode Quick StartStep 1. Create an inputStep 2. Create an outputStep 3. Verify outputPython Quick StartStep 1. Create an inputStep 2. Create an outputStep 3. Verify outputWebOverviewStep 1. Create an inputStep 2. Verify your inputStep 3. Set up your outputStep 4. Create a connectionStep 5. Verify your connectionStep 6. Track eventsStep 7. Track user dataStep 8. Create a data planGuidesPartnersIntroductionOutbound IntegrationsOutbound IntegrationsFirehose Java SDKInbound IntegrationsKit IntegrationsOverviewAndroid Kit IntegrationJavaScript Kit IntegrationiOS Kit IntegrationCompose IDData Hosting LocationsGlossaryMigrate from Segment to mParticleMigrate from Segment to mParticleMigrate from Segment to Client-side mParticleMigrate from Segment to Server-side mParticleSegment-to-mParticle Migration ReferenceRules Developer GuideAPI Credential ManagementThe Developer's Guided Journey to mParticleGuidesGetting StartedCreate an InputStart capturing dataConnect an Event OutputCreate an AudienceConnect an Audience OutputTransform and Enhance Your DataPersonalizationIntroductionProfilesAudiencesAudiences OverviewCreate an AudienceConnect an AudienceManage AudiencesReal-time Audiences (Legacy)Standard Audiences (Legacy)Calculated AttributesCalculated Attributes OverviewUsing Calculated AttributesCreate with AI AssistanceCalculated Attributes ReferencePredictive AudiencesPredictive Audiences OverviewUsing Predictive AudiencesJourneysJourneys OverviewManage JourneysDownload an audience from a journeyAudience A/B testing from a journeyJourneys 2.0Predictive AttributesWhat are predictive attributes?Predict Future BehaviorCreate Future PredictionUse Future Predictions in CampaignsAssess and Troubleshoot PredictionsNext Best ActionNext Best Action OverviewCreate a Next Best Action (NBA)View and Manage NBAsActivate Next Best Actions in CampaignsPlatform GuideBillingUsage and Billing ReportThe New mParticle ExperienceThe new mParticle ExperienceThe Overview MapObservabilityObservability OverviewObservability User GuideObservability Troubleshooting ExamplesObservability Span GlossaryIntroductionData RetentionConnectionsActivityLive StreamData FilterRulesTiered EventsmParticle Users and RolesAnalytics Free TrialTroubleshooting mParticleUsage metering for value-based pricing (VBP)AnalyticsIntroductionSetupSync and Activate Analytics User Segments in mParticleUser Segment ActivationWelcome Page AnnouncementsSettingsProject SettingsRoles and TeammatesOrganization SettingsGlobal Project FiltersPortfolio AnalyticsAnalytics Data ManagerAnalytics Data Manager OverviewEventsEvent PropertiesUser PropertiesRevenue MappingExport DataUTM GuideQuery BuilderData DictionaryQuery Builder OverviewModify Filters With And/Or ClausesQuery-time SamplingQuery NotesFilter Where ClausesEvent vs. User PropertiesGroup By ClausesAnnotationsCross-tool CompatibilityApply All for Filter Where ClausesDate Range and Time Settings OverviewUser Attributes at Event TimeUnderstanding the Screen View EventAnalysesAnalyses IntroductionSegmentation: BasicsGetting StartedVisualization OptionsFor ClausesDate Range and Time SettingsCalculatorNumerical SettingsSegmentation: AdvancedAssisted AnalysisProperties ExplorerFrequency in SegmentationTrends in SegmentationDid [not] Perform ClausesCumulative vs. Non-Cumulative Analysis in SegmentationTotal Count of vs. Users Who PerformedSave Your Segmentation AnalysisExport Results in SegmentationExplore Users from SegmentationFunnels: BasicsGetting Started with FunnelsGroup By SettingsConversion WindowTracking PropertiesDate Range and Time SettingsVisualization OptionsInterpreting a Funnel AnalysisFunnels: AdvancedGroup ByFiltersConversion over TimeConversion OrderTrendsFunnel DirectionMulti-path FunnelsAnalyze as Cohort from FunnelSave a Funnel AnalysisExplore Users from a FunnelExport Results from a FunnelCohortsGetting Started with CohortsAnalysis ModesSave a Cohort AnalysisExport ResultsExplore UsersSaved AnalysesManage Analyses in DashboardsJourneysGetting StartedEvent MenuVisualizationEnding EventSave a Journey AnalysisUsersGetting StartedUser Activity TimelinesTime SettingsExport ResultsSave A User AnalysisDashboardsDashboards––Getting StartedManage DashboardsDashboard FiltersOrganize DashboardsScheduled ReportsFavoritesTime and Interval Settings in DashboardsQuery Notes in DashboardsUser AliasingAnalytics ResourcesThe Demo EnvironmentKeyboard ShortcutsTutorialsAnalytics for MarketersAnalytics for Product ManagersCompare Conversion Across Acquisition SourcesAnalyze Product Feature UsageIdentify Points of User FrictionTime-based Subscription AnalysisDashboard Tips and TricksUnderstand Product StickinessOptimize User Flow with A/B TestingUser SegmentsAPIsUser Segments Export APIDashboard Filter APIIDSyncIDSync OverviewUse Cases for IDSyncComponents of IDSyncStore and Organize User DataIdentify UsersDefault IDSync ConfigurationProfile Conversion StrategyProfile Link StrategyProfile Isolation StrategyBest Match StrategyAliasingData MasterGroup IdentityOverviewCreate and Manage Group DefinitionsIntroductionCatalogLive StreamData PlansData PlansBlocked Data Backfill GuideWarehouse SyncData Privacy ControlsData Subject RequestsDefault Service LimitsFeedsCross-Account Audience SharingApproved Sub-ProcessorsImport Data with CSV FilesImport Data with CSV FilesCSV File ReferenceGlossaryVideo IndexAnalytics (Deprecated)Identity ProvidersSingle Sign-On (SSO)Setup ExamplesSettingsDebug ConsoleData Warehouse Delay AlertingIntroductionDeveloper DocsIntroductionIntegrationsIntroductionRudderstackGoogle Tag ManagerSegmentData Warehouses and Data LakesAdvanced Data Warehouse SettingsAWS Kinesis (Snowplow)AWS Redshift (Define Your Own Schema)AWS S3 Integration (Define Your Own Schema)AWS S3 (Snowplow Schema)BigQuery (Snowplow Schema)BigQuery Firebase SchemaBigQuery (Define Your Own Schema)GCP BigQuery ExportSnowflake (Snowplow Schema)Snowplow Schema OverviewSnowflake (Define Your Own Schema)APIsREST APIDashboard Filter API (Deprecated)User Segments Export API (Deprecated)SDKsSDKs IntroductionReact NativeiOSAndroidJavaJavaScriptPythonObject APIDeveloper BasicsAliasingMediaCollecting media data is critical for tracking user behavior when your customers consume video or audio content through Android and iOS mobile applications or on the web. mParticle provides a toolset for integrating media analytics into your customer experience.
The mParticle Media SDK provides a dedicated API for tracking common media events including session start/end, play, pause, and other milestones, as well as logging recurring advertising impressions and chapters for segmented content.
The mParticle Media SDK works hand in hand with the mParticle platform. Data logged from the Media SDK is forwarded to the Android SDK and then forwarded to any included integrations.
The mParticle Media SDK is compatible with Adobe Analytics for Media, supporting the full range of media-related events including heartbeat events. This simplifies an otherwise complicated and error-prone process of setting up media session event tracking and Adobe Heartbeat yourself.
Getting Started
Add the SDK
Before you can begin using the Media SDK, you need to have a working instance of the mParticle core SDK. Please see the core SDK getting started section for more details.
dependencies {
implementation 'com.mparticle:android-media:1.0'
}
Creating an instance of a Media Session
The Android Media SDK provides a MediaSession object. Each MediaSession object represents a single end to end media experience and relates one-to-one to a piece of content. For example, if a customer is watching a video, pausing, seeking and scrubbing, that is considered a single session. If they stop the video, and play another piece of content, that is a new session.
var mediaSession = MediaSession.builder(MParticle.getInstance()) {
title = "Media Title"
duration = 1000
mediaContentId = "123"
streamType = StreamType.LIVE_STEAM
contentType = ContentType.VIDEO
}
mediaSession.mediaSessionAttributes = mutableMapOf(
"my_session_attribute" to "My Session Attribute"
)
You can access the source code and contribute to the mParticle Media SDK Github repo here.
Summary Events
Summary events are automated events that contain an accumulated record of what occured during a session, individual segments, and individual ads.
Session Summary Events
A Session Summary event tracks from when a MediaSession is initialized to when it’s de-initialized or when logMediaSessionEnd is called. The more accurate and detailed developers are with logPlay, logPause, logAdStart, and other media events, the more accurate the summary data will be.
The following table explains the different parts of the Session Summary event.
In the Android Media SDK 1.X releases timestamps are captured using 'System.currentTimeMillis()' in Kotlin and are therefore reported in milliseconds from the epoch format. Because iOS and web use different capture methods, timestamps of the same moment sometimes differ.
Session Summary Keys
Description
“media_session_id”
A unique identifier automatically created for each session
“content_id”
A unique identifier that can set by the user when initializing a session
“content_title”
The title of the content. Can be set by the user when initializing a session
“media_session_start_time”
Timestamp created on logMediaSessionStart event
“media_session_end_time”
Timestamp of most recent valid event
“media_time_spent”
Total seconds user spent on this session
“media_content_time_spent”
The total seconds user spent playing content
“media_content_complete”
True if logMediaContentEnd was called or if user progressed past percentage set in MediaSession.mediaContentCompleteLimit
“media_session_segment_total”
The number of segments progressed into by the user
“media_total_ad_time_spent”
The total seconds that ads played during this session
“media_ad_time_spent_rate”
The parcentage of playback time that was ad content
“media_session_ad_total”
The number of ads played in the media session
“media_session_ad_objects”
An array of unique identifiers for ads played during this media session
Segment Summary Events
A Segment Summary event tracks from when logSegmentStart is called to when either logSegmentSkip or logSegmentEnd is called. Segments could be the chapters of an audiobook or scenes in a movie.
The following table explains the different parts of the Segment Summary event.
Segment Summary Keys
Description
“media_session_id”
A unique identifier automatically created for each session
“content_id”
A unique identifier that can set by the user when initializing a session
“segment_title”
The title of the segment
“segment_index”
The index of the segment
“segment_start_time”
Timestamp created on logSegmentStart event
“segment_end_time”
Timestamp of most recent valid event in segment
“media_segment_time_spent”
Total seconds user spent on this segment
“segment_completed”
True if logSegmentEnd was called to end the segment
“segment_skipped”
True if logSegmentSkip was called to end the segment
Ad Summary Events
An Ad Summary event tracks from when logAdStart is called to when either logAdSkip or logAdEnd is called.
The following table explains the different parts of the Ad Summary event.
Ad Summary Keys
Description
“media_session_id”
A unique identifier automatically created for each session
“ad_break_id”
A unique identifier that can set by the user when initializing an ad break
“ad_content_id”
A unique identifier that can set by the user when initializing an ad
“ad_content_title”
The title of the ad
“ad_content_start_time”
Timestamp created on logAdStart event
“ad_content_end_time”
Timestamp of most recent valid event in segment
“ad_completed”
True if logAdEnd was called to end the segment.
“ad_skipped”
True if logAdSkip was called to end the segment.
Logging media events
Once your session is instantiated, you will need to trigger a SessionStart. This should be done at the moment the user interacts with your content. For example, if the media is set to trigger on a user click, and your player fires a play event when the content starts, the session must begin before the play event.
Start a session
// set playhead
val currentPlayheadPosition = 300
// create any custom attributes
val customAttributes = mapOf(
"<media attribute key>" to "<media attribute value>",
"<custom attribute key>" to "<custom attribute value>"
)
// build Options object for logging Media Session Start
val options = Options(currentPlayheadPosition, customAttributes)
// call Media Session Start heartbeat event
mediaSession.logMediaSessionStart(options)
Log a play event
val options = Options(currentPlayheadPosition = 300)
mediaSession.logPlay(options)
(optional) Fire other events for user interaction, i.e. pause
val options = Options(currentPlayheadPosition = 300)
mediaSession.logPause(options)
End the Media Content once the content is complete
val options = Options(currentPlayheadPosition = 300)
mediaSession.logMediaContentEnd(options)
End the Media Session once the user interaction is over (such as after a post-roll or if the app is terminated)
val options = Options(currentPlayheadPosition = 300)
mediaSession.logMediaSessionEnd(options)
Logging Advertising
In most cases, advertising comes in as a series of Ad Breaks each containing numerous Ads. The Media SDK provides both sets of functionality so that you can track this behavior.
Fire an AdBreakStart event
mediaSession.logAdBreakStart {
id = "123456"
// included as ad_break_id for Ad Break Start/End and Summary events
title = "pre-roll"
// ad_break_title
duration = 6000
// ad_break_duration
}
Trigger an AdStart event
mediaSession.logAdStart {
id = "4423210"
// included as ad_content_id for Ad Start/End and Summary events
advertiser= "Moms Friendly Robot Company"
// ad_content_advertiser
title= "What?! Nobody rips off my kids but me!"
// ad_content_title
campaign= "MomCorp Galactic Domination Plot 3201"
// ad_content_campaign
this.duration = 60000
// ad_content_duration
creative= "A Fishful of Dollars"
// ad_content_creative
siteId= "moms"
// ad_content_site_id
placement= "first"
// ad_content_placement
position= 0
// ad_content_position
}
Fire AdEnd or AdSkip when appropriate
mediaSession.logAdEnd()
Trigger an AdBreakEnd event when all ads have completed
mediaSession.logAdBreakEnd()
Custom media session attributes
You can create custom media session attributes when initializing a new media session directly in MediaSession.builder(). These custom session attributes are helpful when you need to track data like the specific page a piece of content was viewed on.
Custom media session attributes are automatically propagated to all subsequent media events logged during the session in addition to the media session summary event. Since custom session attributes are propagated to any event (a media event, advertising event, or a custom events) that is logged during the session, you don’t need to set these attributes again when you trigger the start of a media session.
How are these unique from custom event attributes?
There are several differences between event-level custom attributes and custom media session attributes:
Custom media session attributes are propagated to all media events, ad events, or other custom events that are logged during the current media session.
Custom session attributes are also propagated to segment summary events and ad summary events, while custom event-level attributes are not.
Custom event attributes in the Media SDK are not included in the media session summary event.
Custom media session attribute limitations
Keys must be strings and cannot exceed 255 characters
Values may be strings, numbers, booleans, or dates, and cannot exceed 4096 characters
var mediaSession = MediaSession.builder(MParticle.getInstance()) {
title = "Media Title"
duration = 1000
mediaContentId = "123"
streamType = StreamType.LIVE_STEAM
contentType = ContentType.VIDEO
}
mediaSession.mediaSessionAttributes = mutableMapOf(
"my_session_attribute" to "My Session Attribute"
)
Generating Custom Events
The Media SDK will generate a MediaEvent for client-side kits such as Adobe Media Analytics, however the event can be converted to look just like a typical mParticle custom event that may be used to create audiences, used in calculated attributes, and sent to most mParticle integrations for analysis and activation.
To enable Custom event generation, pass a boolean to the initialization of your MediaSession to enable the Log Custom Event feature:
val mediaSession = MediaSession.builder {
title = "Media Title"
mediaContentId = "123"
duration = 1000
streamType = StreamType.LIVE_STEAM
contentType = ContentType.VIDEO
logMPEvents = true
}
To log a custom event that does not correspond with the supported Media Session events, you can generate a completely custom event:
val mpEvent = mediaSession.buildMPEvent("Milestone", mapOf(
"type" to "95%"
))
MParticle.getInstance()?.logEvent(mpEvent)
Custom Event Schema
The Media SDK will generate Custom events per the specification below.
Event Names
The Media SDK exposes methods that will trigger Media Events based on the most common player functions. The Media SDK maps every MediaSession API to a predefined Custom event name. The table below details all of the predefineed Media Events:
Media Session API
Custom Event Name
mediaSession.logPlay()
‘Play’
mediaSession.logPause()
‘Pause’
mediaSession.logMediaContentEnd:()
‘Media Content End’
mediaSession.logMediaSessionStart()
‘Media Session Start’
mediaSession.logMediaSessionEnd()
‘Media Session End’
mediaSession.logSeekStart()
‘Seek Start’
mediaSession.logSeekEnd()
‘Seek End’
mediaSession.logBufferStart()
‘Buffer Start’
mediaSession.logBufferEnd()
‘Buffer End’
mediaSession.logUpdatePlayheadPosition()
‘Update Playhead Position’
mediaSession.logAdClick()
‘Ad Click’
mediaSession.logAdBreakStart()
‘Ad Break Start’
mediaSession.logAdBreakEnd()
‘Ad Break End’
mediaSession.logAdStart()
‘Ad Start’
mediaSession.logAdEnd()
‘Ad End’
mediaSession.logAdSkip()
‘Ad Skip’
mediaSession.logSegmentStart()
‘Segment Start’
mediaSession.logSegmentEnd()
‘Segment End’
mediaSession.logSegmentSkip()
‘Segment Skip’
mediaSession.logUpdateQoS()
‘Update QoS’
Event Attributes
The media attributes below are a list of all available for capturing valuable information with every media event listed above. The customer will choose which attributes will be logged for each event to best describe the session characteristics for that event at that time. Should you require attributes not listed below, you may add your own media attributes.
Note: Depending on your player, you will need to either enable the callback method to receive updates for playhead position and quality of service (QoS) or set up a job to frequently poll for the current values.
Event Attribute
Description
media_session_id
Unique identifier assigned when media event starts (it is recommended that this be included with every event log)
media_session_start_time
Timestamp for media session initiation
media_session_end_time
Timestamp for media session completed, ended, or quit
media_session_ad_objects
Array of all ad_content_ids consumed
media_session_custom_attribute
Custom media session attribute
stream_type
Encoded audio and video streams are assembled in a container “bitstream” such as MP4, FLV, WebM, ASF or ISMA stream
types
stream_format
The video stream is compressed using a video coding format to make the file size smaller. Video coding formats include H.264, HEVC, VP8 or VP9
content_type
Content type name
content_id
Unique content identifier
content_duration
Content duration
content_title
Content title
content_asset_id
Content asset id
content_season
A “season” is a reference to a set of episodes of a show within a specific period of time
content_episode
An “episode” is a coherent narrative unit within a larger dramatic work, such as a radio, television, audio or video streaming series
content_daypart
A “daypart” is the time division in a typical broadcast day by different media like Radio and Television. Different part of the days can be Morning shows, afternoon siesta, evening songs or prime time slot. Dayparts can be standard or customized.
content_originator
Content source name
content_network
A “network” includes broadcast and cable television networks, television distribution and production, domestic television stations, radio networks and stations, and audio and video streaming services.
content_mvpd
A “multichannel video programming distributor” (MVPD) include cable operators, multichannel multipoint distribution services, direct broadcast satellite services, or television receive-only satellite program distributors.
content_feed
Name of content feed
content_show
Name of show
content_show_type
Show type
content_genre
A “genre” is a category of artistic composition, as in videos, music or literature, characterized by similarities in form, style, or subject matter.
content_rating
A content rating (also known as maturity rating)rates the suitability of TV broadcasts, movies, comic books, or video games to its audience.
content_authorized
Content rights, release, or licence reference
content_first_air_date
Date of initial broadcast
content_digital_date
Date of initial digital distribution
playhead_position
The current playhead position at the moment the event occured
milestone
A “milestone” is a customer defined percentage of content consumed typically reported at 25%, 50%, 75%, and 95%. Customers may capture milestones at any percentage points they are most interested in tracking
buffer_duration
Duration of content buffering
buffer_percent
Percentage of content buffering
buffer_position
Playhead positioin when buffering
seek_position
Playhead position when seek began or ended
segment_title
Segment title
segment_index
Segment index
segment_duration
Segment duration
ad_break_id
Unique identifier for the ad break. Ad breaks may have one or more pieces of ad content
ad_break_title
Ad break title
ad_break_duration
Ad break duration
ad_content_id
Unique identifier for a specific piece of ad content
ad_content_title
Ad content title
ad_content_duration
Ad content duration
ad_content_advertiser
Name of advertiser
ad_content_campaign
Name of campaign
ad_content_creative
Name of creative
ad_content_placement
Description of placement
ad_content_position
Index of position in content
ad_content_site_id
Identifier of ad content site
ad_custom_attribute
User defined attribute
player_name
Then name of the player used
player_ovp
Online Video Platform name
player_initial_resolution
The default resolution of the content
qos_bitrate
Quality of service (QoS) bitrate
qos_fps
Quality of service (QoS) frames per second
qos_startup_time
Quality of service (QoS) time from content play event to first frame
qos_dropped_frames
Quality of service (QoS) dropped frames
other_attribute
Replace “other_attribute” with any attribute name you wish to capture. The system will create an object with that name and store the value provided.
Example Event
{
"event_type": "custom_event",
"data": {
"custom_event_type": "media",
"event_name": "Play",
"custom_flags": {},
"timestamp_unixtime_ms": "1573828863888",
"event_id": "-109840007014118971",
"source_message_id": null,
"session_id": "-8572887793551346848",
"session_uuid": "29959B6B-9C3B-486F-9807-B5534EA1B16A",
"session_start_unixtime_ms": "1573828757702",
"event_start_unixtime_ms": "1573828863888",
"custom_attributes": {
"content_title": "My sweet sweet media",
"content_duration": "120000",
"content_id": "1234567",
"content_type": "Video",
"stream_type": "OnDemand",
"media_session_id": "96a023b8-b0c7-47b7-b687-09f73b9dfac3",
"playhead_position": "110123"
}
}
}
Using the Event Listener
In cases where you may need to handle some custom functionality when a media event occurs, the Media SDK provides a mediaEventListener which will provide a callback.
For example, if you need to trigger a custom function when Play or Pause occurs:
mediaSession.mediaEventListener = { mediaEvent ->
// Some custom callback method defined by user
// Should only trigger when play or pause is fired
when (mediaEvent.eventName) {
MediaEventName.PLAY, MediaEventName.PAUSE -> {
val mpEvent = mediaEvent.toMPEvent()
MParticle.getInstance()?.logEvent(mpEvent)
}
}
}
API Reference
Visit the complete API Reference for a deep dive into the Media SDKWas this page helpful?YesNoLast Updated: February 27, 2025© 2025 mParticle, Inc. All rights reserved.mParticle.comPrivacy PolicyCookie PolicyDo Not Sell or Share My Personal Data