URL: https://segment.com/docs/connections/spec/track/#spec-track

Spec: Track | Segment Documentation
Skip to main content
Home
Getting Started
What is Segment?
How Segment Works
Getting Started Guide
A Basic Segment Installation
Planning a Full Installation
A Full Segment Installation
Sending Data to Destinations
Testing and Debugging
What's Next
Use Cases
Use Cases Overview
Choosing a Use Case
Use Cases Setup
Use Cases Reference
Guides
An Introduction to Segment
For Developers
For Data Users
For Workspace Admins
Filtering your Segment Data
Handling Duplicate Data
Internet Bots
Segment vs. Tag Managers
Replay
Regional Segment
Audiences and Journeys
How-to Guides
How-to Guides Index
Automating Multi-Channel Re-Engagement Campaigns
Collecting Data on the Client or Server
Collecting Pageviews on the Server Side
Creating a Push Notification
Tracking Customers Across Channels and Devices
Setting up a Dynamic Coupon Program to Reward Loyal Customers
Forecasting LTV with SQL and Excel for E-Commerce
Importing Historical Data
Joining User Profiles
Measuring Your Advertising Funnel
Measuring the ROI of Your Marketing Campaigns
Migrating Code From Other Analytics Tools
Segment's Role in Attribution
Setting Up Event-Triggered Notifications or Alerts
Usage and Billing
Account Management
Billing and Account FAQs
MTUs, Throughput and Billing
Discounts or Coupons
Connections
Overview
The Segment Spec
Spec Overview
Spec: Page
Spec: Screen
Spec: Track
Spec: Group
Spec: Identify
Spec: Alias
Spec: AI Copilot
Spec: Common Fields
Native Mobile Spec
What is the native mobile spec?
Packaging SDKs for Mobile Destinations
Spec: Semantic Events
Spec: B2B SaaS
Spec: Ecommerce Events
Ecommerce Tracking Plans
Video Spec
Best Practices for Identifying Users
Best Practices for Event Calls
Sources
Sources Overview
Sources Catalog
Cloud Sources
Source Debugger
Segment-Managed Custom Domain
Self-Managed Custom Proxy
Visual Tagger
Schema
Schema Controls
Using Schema Controls
Schema Unique Limits
Destinations
Destinations Overview
Destination Actions
Add a Destination
Destinations Catalog
Destination Filters
Reverse ETL
Reverse ETL Overview
Set Up Reverse ETL
Manage Reverse ETL Syncs
Reverse ETL System
Reverse ETL Destination Catalog
Reverse ETL Source Setup Guides
Azure Reverse ETL Setup
BigQuery Reverse ETL Setup
Databricks Reverse ETL Setup
Postgres Reverse ETL Setup
Redshift Reverse ETL Setup
Snowflake Reverse ETL Setup
Functions
Functions Overview
Source Functions
Destination Functions
Destination Insert Functions
Functions Copilot
Functions Copilot Nutrition Facts Label
Functions Environment
Functions Usage Limits
Functions for AWS APIs
Storage Destinations
Storage Destinations Overview
Storage Destinations Catalog
Segment Data Lakes
Data Lakes Overview
Set Up Data Lakes
Sync Reports and Error Reporting
AWS Lake Formation
Data Lakes Sync History and Health
Data Lakes vs. Warehouses
Data Warehouses
Warehouse Overview
Warehouse Schemas
Warehouse Syncs
Warehouse Health Dashboards
Choosing a Warehouse
Warehouse FAQs
Adding Warehouse Users
Warehouse Errors
Redshift Cluster and Redshift Connector Limitations
Speeding Up Redshift Queries
Useful SQL Queries for Redshift
Regional Segment
Event Tester
Data Export Options
Using Schema Controls
Event Delivery
Delivery Overview
Connections Alerting
Locate Your Write Key
Integration Error Codes
Rate Limits
OAuth 2.0
AWS PrivateLink Integration
Unify
Unify Overview
Unify Onboarding
Identity Resolution
Overview
Onboarding
Space Setup
Use Cases
External IDs
Settings
E-Commerce Example
Profiles Sync
Profiles Sync Overview
Profiles Sync Setup
Setup
Databricks for Profiles Sync
Sample Queries
Tables & Materialized Views
Data Graph
Data Graph
Setup Guides
BigQuery Data Graph Setup
Databricks Data Graph Setup
Redshift Data Graph Setup
Snowflake Data Graph Setup
Linked Events
Linked Events Overview
Linked Events Limits
Traits
Predictions
Predictions
Using Predictions
Suggested Predictive Audiences
Predictions Nutrition Facts Label
Computed Traits
Custom Traits
SQL Traits
Recommended Items
Profile API
Profile Debugger
Profiles Insights
CSV Upload
Unify and GDPR
Unify FAQs
Unify Limits
Engage
Introduction
Foundations Onboarding
Premier Onboarding
Use Cases
User Subscriptions
User Subscriptions
Set User Subscriptions
Subscription States
Subscription Groups
Subscriptions with SQL Traits
Update Subscriptions with a CSV
Profiles
Use Profiles and Traits with a CSV
Audiences
Audiences Overview
Linked Audiences
Linked Audiences Overview
Linked Audiences Limits
Account-level Audiences
Generative Audiences
Generative Audiences Nutrition Facts Label
Product Based Audiences
Product Based Audiences Nutrition Facts Label
Organize Audiences
Send Audiences to Destinations
Journeys
Journeys Overview
Build a Journey
Journey Step Types
Journey Edits and Versioning
Send Data to Destinations
Journeys Analytics
Event-Triggered Journeys
Overview
Event-Triggered Journeys Steps
Journey Context
Journeys Best Practices and FAQ
Example Journeys Use Cases
Understand Journeys Logic
Journeys Glossary
Content
Email Template
Drag and Drop Editor
HTML Editor
SMS Template
WhatsApp Template
Mobile Push Template
Organizing Your Templates
Campaigns
Campaigns Overview
Email Campaigns
SMS Campaigns
Broadcasts
WhatsApp Campaigns
Mobile Push
Mobile Push Onboarding
Mobile Push Campaigns
Trait Activation
Trait Activation Overview
Trait Enrichment
ID Sync
Analytics Overview
Engage Settings
Engage Default Limits
Engage and Warehouses
Using Engage Data
Engage FAQs
Privacy
Privacy Overview
Privacy Portal
Detect PII
Data Controls and Alerts
GDPR
Complying With GDPR
User Deletion and Suppression
Consent Management
Consent Management Overview
Consent in Segment Connections
Configure Consent Management
Consent in Unify
Consent in Reverse ETL
Consent FAQs
Account & Data Deletion
HIPAA Eligible Segment
Privacy FAQs
Protocols
Protocols Overview
Create a Tracking Plan
Data Collection Best Practices
The Tracking Plan
Tracking Plan Libraries
Validate With Violations
Connect Sources to Your Tracking Plan
Review and Resolve Event Violations
Forward Violations
Enforce With Data Controls
Customize Your Schema Controls
Forward Blocked Events
Transform to Fix Bad Data
Protocols Extensions
Protocols APIs
Typewriter
Anomaly Detection
Schema Controls
Protocols FAQs
Segment App
Segment Web App
Workspace Home
Access Management
Identity & Access Management Overview
Concepts
Roles
Manage Workspace Access
Label-Based Access Control
Audit Trail
Single Sign On
System for Cross-domain Identity Management (SCIM) Configuration Guide
Multi-Factor Authentication (MFA)
Extensions
Extensions Overview
dbt
Git
Picking a Secure Password
Prod and Testing Environments in Segment
Verifying Your Email Address
Support Access
API
Public API
Public API
Destination Filter Query Language
Segment Query Language
Config API
Config API overview
API design
Authentication
Destination Filter Query Language
Partners
Glossary
Help
Product Updates
Back to Segment.com
Log in
Sign Up
Home
Getting Started
What is Segment?
How Segment Works
Getting Started Guide
A Basic Segment Installation
Planning a Full Installation
A Full Segment Installation
Sending Data to Destinations
Testing and Debugging
What's Next
Use Cases
Use Cases Overview
Choosing a Use Case
Use Cases Setup
Use Cases Reference
Guides
An Introduction to Segment
For Developers
For Data Users
For Workspace Admins
Filtering your Segment Data
Handling Duplicate Data
Internet Bots
Segment vs. Tag Managers
Replay
Regional Segment
Audiences and Journeys
How-to Guides
How-to Guides Index
Automating Multi-Channel Re-Engagement Campaigns
Collecting Data on the Client or Server
Collecting Pageviews on the Server Side
Creating a Push Notification
Tracking Customers Across Channels and Devices
Setting up a Dynamic Coupon Program to Reward Loyal Customers
Forecasting LTV with SQL and Excel for E-Commerce
Importing Historical Data
Joining User Profiles
Measuring Your Advertising Funnel
Measuring the ROI of Your Marketing Campaigns
Migrating Code From Other Analytics Tools
Segment's Role in Attribution
Setting Up Event-Triggered Notifications or Alerts
Usage and Billing
Account Management
Billing and Account FAQs
MTUs, Throughput and Billing
Discounts or Coupons
Connections
Overview
The Segment Spec
Spec Overview
Spec: Page
Spec: Screen
Spec: Track
Spec: Group
Spec: Identify
Spec: Alias
Spec: AI Copilot
Spec: Common Fields
Native Mobile Spec
What is the native mobile spec?
Packaging SDKs for Mobile Destinations
Spec: Semantic Events
Spec: B2B SaaS
Spec: Ecommerce Events
Ecommerce Tracking Plans
Video Spec
Best Practices for Identifying Users
Best Practices for Event Calls
Sources
Sources Overview
Sources Catalog
Cloud Sources
Source Debugger
Segment-Managed Custom Domain
Self-Managed Custom Proxy
Visual Tagger
Schema
Schema Controls
Using Schema Controls
Schema Unique Limits
Destinations
Destinations Overview
Destination Actions
Add a Destination
Destinations Catalog
Destination Filters
Reverse ETL
Reverse ETL Overview
Set Up Reverse ETL
Manage Reverse ETL Syncs
Reverse ETL System
Reverse ETL Destination Catalog
Reverse ETL Source Setup Guides
Azure Reverse ETL Setup
BigQuery Reverse ETL Setup
Databricks Reverse ETL Setup
Postgres Reverse ETL Setup
Redshift Reverse ETL Setup
Snowflake Reverse ETL Setup
Functions
Functions Overview
Source Functions
Destination Functions
Destination Insert Functions
Functions Copilot
Functions Copilot Nutrition Facts Label
Functions Environment
Functions Usage Limits
Functions for AWS APIs
Storage Destinations
Storage Destinations Overview
Storage Destinations Catalog
Segment Data Lakes
Data Lakes Overview
Set Up Data Lakes
Sync Reports and Error Reporting
AWS Lake Formation
Data Lakes Sync History and Health
Data Lakes vs. Warehouses
Data Warehouses
Warehouse Overview
Warehouse Schemas
Warehouse Syncs
Warehouse Health Dashboards
Choosing a Warehouse
Warehouse FAQs
Adding Warehouse Users
Warehouse Errors
Redshift Cluster and Redshift Connector Limitations
Speeding Up Redshift Queries
Useful SQL Queries for Redshift
Regional Segment
Event Tester
Data Export Options
Using Schema Controls
Event Delivery
Delivery Overview
Connections Alerting
Locate Your Write Key
Integration Error Codes
Rate Limits
OAuth 2.0
AWS PrivateLink Integration
Unify
Unify Overview
Unify Onboarding
Identity Resolution
Overview
Onboarding
Space Setup
Use Cases
External IDs
Settings
E-Commerce Example
Profiles Sync
Profiles Sync Overview
Profiles Sync Setup
Setup
Databricks for Profiles Sync
Sample Queries
Tables & Materialized Views
Data Graph
Data Graph
Setup Guides
BigQuery Data Graph Setup
Databricks Data Graph Setup
Redshift Data Graph Setup
Snowflake Data Graph Setup
Linked Events
Linked Events Overview
Linked Events Limits
Traits
Predictions
Predictions
Using Predictions
Suggested Predictive Audiences
Predictions Nutrition Facts Label
Computed Traits
Custom Traits
SQL Traits
Recommended Items
Profile API
Profile Debugger
Profiles Insights
CSV Upload
Unify and GDPR
Unify FAQs
Unify Limits
Engage
Introduction
Foundations Onboarding
Premier Onboarding
Use Cases
User Subscriptions
User Subscriptions
Set User Subscriptions
Subscription States
Subscription Groups
Subscriptions with SQL Traits
Update Subscriptions with a CSV
Profiles
Use Profiles and Traits with a CSV
Audiences
Audiences Overview
Linked Audiences
Linked Audiences Overview
Linked Audiences Limits
Account-level Audiences
Generative Audiences
Generative Audiences Nutrition Facts Label
Product Based Audiences
Product Based Audiences Nutrition Facts Label
Organize Audiences
Send Audiences to Destinations
Journeys
Journeys Overview
Build a Journey
Journey Step Types
Journey Edits and Versioning
Send Data to Destinations
Journeys Analytics
Event-Triggered Journeys
Overview
Event-Triggered Journeys Steps
Journey Context
Journeys Best Practices and FAQ
Example Journeys Use Cases
Understand Journeys Logic
Journeys Glossary
Content
Email Template
Drag and Drop Editor
HTML Editor
SMS Template
WhatsApp Template
Mobile Push Template
Organizing Your Templates
Campaigns
Campaigns Overview
Email Campaigns
SMS Campaigns
Broadcasts
WhatsApp Campaigns
Mobile Push
Mobile Push Onboarding
Mobile Push Campaigns
Trait Activation
Trait Activation Overview
Trait Enrichment
ID Sync
Analytics Overview
Engage Settings
Engage Default Limits
Engage and Warehouses
Using Engage Data
Engage FAQs
Privacy
Privacy Overview
Privacy Portal
Detect PII
Data Controls and Alerts
GDPR
Complying With GDPR
User Deletion and Suppression
Consent Management
Consent Management Overview
Consent in Segment Connections
Configure Consent Management
Consent in Unify
Consent in Reverse ETL
Consent FAQs
Account & Data Deletion
HIPAA Eligible Segment
Privacy FAQs
Protocols
Protocols Overview
Create a Tracking Plan
Data Collection Best Practices
The Tracking Plan
Tracking Plan Libraries
Validate With Violations
Connect Sources to Your Tracking Plan
Review and Resolve Event Violations
Forward Violations
Enforce With Data Controls
Customize Your Schema Controls
Forward Blocked Events
Transform to Fix Bad Data
Protocols Extensions
Protocols APIs
Typewriter
Anomaly Detection
Schema Controls
Protocols FAQs
Segment App
Segment Web App
Workspace Home
Access Management
Identity & Access Management Overview
Concepts
Roles
Manage Workspace Access
Label-Based Access Control
Audit Trail
Single Sign On
System for Cross-domain Identity Management (SCIM) Configuration Guide
Multi-Factor Authentication (MFA)
Extensions
Extensions Overview
dbt
Git
Picking a Secure Password
Prod and Testing Environments in Segment
Verifying Your Email Address
Support Access
API
Public API
Public API
Destination Filter Query Language
Segment Query Language
Config API
Config API overview
API design
Authentication
Destination Filter Query Language
Partners
Glossary
Config API
Config API overview
API design
Authentication
Destination Filter Query Language
Reference
Creating a Javascript web source and Google Analytics destination
Help
Home
/
Connections
/
Spec
/
Spec: Track
Spec: Track
On this page
Example
Identities
Event
Properties
Sending Traits in a Track Call - Destination Actions
Context
The Track API call is how you record any actions your users perform, along with any properties that describe the action.
Segment University: The Track Method
Check out our high-level overview of the Track method in Segment University. (Must be logged in to access.)
Each action is known as an event. Each event has a name, like User Registered, and properties. For example, a User Registered event might have properties like plan or accountType. Calling Track in one of our sources is one of the first steps to getting started with Segment.
Here’s the payload of a typical Track call with most common fields removed:
{
"type": "track",
"event": "User Registered",
"properties": {
"plan": "Pro Annual",
"accountType" : "Facebook"
}
}
And here’s the corresponding JavaScript event that would generate the above payload:
analytics.track("User Registered", {
plan: "Pro Annual",
accountType: "Facebook"
});
Based on the library you use, the syntax in the examples might be different. You can find library-specific documentation on the Sources Overview page.
Beyond the common fields, the Track call has the following fields:
Field
Type
Description
event
required
String
Name of the action that a user has performed.
See the Event field docs for more details.
properties
optional
Object
Free-form dictionary of properties of the event, like revenue
See the Properties docs for a list of reserved property names.
Example
Here’s a complete example of a Track call:
{
"anonymousId": "23adfd82-aa0f-45a7-a756-24f2a7a4c895",
"context": {
"library": {
"name": "analytics.js",
"version": "2.11.1"
},
"page": {
"path": "/academy/",
"referrer": "",
"search": "",
"title": "Analytics Academy",
"url": "https://segment.com/academy/"
},
"userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36",
"ip": "108.0.78.21"
},
"event": "Course Clicked",
"integrations": {},
"messageId": "ajs-f8ca1e4de5024d9430b3928bd8ac6b96",
"properties": {
"title": "Intro to Analytics"
},
"receivedAt": "2015-12-12T19:11:01.266Z",
"sentAt": "2015-12-12T19:11:01.169Z",
"timestamp": "2015-12-12T19:11:01.249Z",
"type": "track",
"userId": "AiUGstSDIg",
"originalTimestamp": "2015-12-12T19:11:01.152Z"
}
Create your own Track call
Use the following interactive code pen to see what your Track calls look like with user-provided information:
Sample Track call
Event:
Title:
Intro to Analytics
Protocols 101
Reverse ETL
Sample Track Call
Sample output goes here!
Identities
The User ID is a unique identifier for the user performing the actions. Check out the User ID docs for more detail.
The Anonymous ID can be any pseudo-unique identifier, for cases where you don’t know who the user is, but you still want to tie them to an event. Check out the Anonymous ID docs for more detail.
Note: In our browser and mobile libraries a User ID is automatically added from the state stored by a previous identify call, so you do not need to add it yourself. They will also automatically handle Anonymous IDs under the covers.
Event
Every Track call records a single user action. Segment calls these “events”, and recommend that you make your event names human-readable, so that everyone on your team (even you, after all that caffeine) can know what they mean instantly.
Don’t use nondescript names like Event 12 or TMDropd. Instead, use unique but recognizable names like Video Recorded and Order Completed.
Segment recommends event names built from a noun and past-tense verb.
For more information about best practices in event naming, check out Segment’s Analytics Academy lesson on best practices for naming conventions for clean data.
Segment has standardized a series of reserved event names that have special semantic meaning. We map these events to tools that support them whenever possible. See the Semantic Events docs for more detail.
Properties
Properties are extra pieces of information you can tie to events you track. They can be anything that will be useful while analyzing the events later. Segment recommends sending properties whenever possible because they give you a more complete picture of what your users are doing.
Segment has reserved some properties that have semantic meanings, and handle them in special ways. For example, we always expect revenue to be a dollar amount that we send to tools that handle revenue tracking.
You should only use reserved properties for their intended meaning.
The following are all of the reserved properties Segment has standardized that apply to all events. Check out the Semantic Events docs for properties specific to individual reserved events.
Property
Type
Description
revenue
Number
Amount of revenue an event resulted in. This should be a decimal value, so a shirt worth $19.99 would result in a revenue of 19.99.
currency
String
Currency of the revenue an event resulted in. This should be sent in the ISO 4127 format. If this isn’t set, Segment assumes the revenue to be in US dollars.
value
Number
An abstract “value” to associate with an event. This is typically used in situations where the event doesn’t generate real-dollar revenue, but has an intrinsic value to a marketing team, like newsletter signups.
Note: You might be used to some destinations recognizing special properties differently. For example, Mixpanel has a special track_charges method for accepting revenue. Luckily, you don’t have to worry about those inconsistencies. Just pass along revenue.
Segment will handle all of the destination-specific conversions for you automatically. Same goes for the rest of the reserved properties.
Sending Traits in a Track Call - Destination Actions
All events have the ability to include additional event data in the context object. There may be instances when your team may want to include user traits or group traits in a Track event, such as having a single event trigger multiple events in an Actions destination. Since user Traits are not standard fields for a Track event, in order to do this, you’ll need to explicitely pass the user’s traits into the event payload’s context.traits object.
For instructions on how to pass fields to the context object for a specific library, please see the related library’s Source documentation.
Segment’s Actions destinations allows your team to build individual actions that are triggered based on a set of configured conditions. By adding the user’s latest traits to the Track event’s context.traits object, its possible to build two separate Actions to be triggered by this single event. For example, if your team would like to send an Identify event anytime the specific Track event “Button Clicked” is triggered, simply add the available traits into the Track event’s payload, then build a destination Actions for the Track event : Event Name is Button Clicked, and a destination Action for the Identify event : All of the following conditions are true: Event Name is Button Clicked, Event Context traits exists, and then both Actions will have access to reference the context.traits fields within its mappings.
For more information on the context object, please see the Spec: Common Fields documentation.
Field
Type
Description
context
optional
Object
Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like ip address or locale
See the Context field docs for more details.
If the Example Payload shared above is modified as the event Button Clicked with "username": "testing-123" in the context.traits object, then the event’s payload would be :
{
"anonymousId": "23adfd82-aa0f-45a7-a756-24f2a7a4c895",
"context": {
"library": {
"name": "analytics.js",
"version": "2.11.1"
},
"page": {
"path": "/academy/",
"referrer": "",
"search": "",
"title": "Analytics Academy",
"url": "https://segment.com/academy/"
},
"userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36",
"ip": "108.0.78.21",
"traits": {
"username": "testing-123"
}
},
"event": "Button Clicked",
"integrations": {},
"messageId": "ajs-f8ca1e4de5024d9430b3928bd8ac6b96",
"properties": {
"title": "Intro to Analytics"
},
"receivedAt": "2015-12-12T19:11:01.266Z",
"sentAt": "2015-12-12T19:11:01.169Z",
"timestamp": "2015-12-12T19:11:01.249Z",
"type": "track",
"userId": "AiUGstSDIg",
"originalTimestamp": "2015-12-12T19:11:01.152Z"
}
Here’s what that Identify Action would look like :
Context
Context is a dictionary of extra information that provides useful context about a datapoint, for example the user’s ip address or locale. You should only use Context fields for their intended meaning.
Field
Type
Description
active
Boolean
Whether a user is active.
This is usually used to flag an .identify() call to just update the traits but not “last seen.”
app
Object
dictionary of information about the current application, containing name, version, and build.
This is collected automatically from the mobile libraries when possible.
campaign
Object
Dictionary of information about the campaign that resulted in the API call, containing name, source, medium, term, content, and any other custom UTM parameter.
This maps directly to the common UTM campaign parameters.
device
Object
Dictionary of information about the device, containing id, advertisingId, manufacturer, model, name, type, and version.
ip
String
Current user’s IP address.
library
Object
Dictionary of information about the library making the requests to the API, containing name and version.
locale
String
Locale string for the current user, for example en-US.
network
Object
Dictionary of information about the current network connection, containing bluetooth, carrier, cellular, and wifi. If the context.network.cellular and context.network.wifi fields are empty, then the user is offline.
os
Object
Dictionary of information about the operating system, containing name and version.
page
Object
Dictionary of information about the current page in the browser, containing path, referrer, search, title and url. This is automatically collected by Analytics.js.
referrer
Object
Dictionary of information about the way the user was referred to the website or app, containing type, name, url, and link.
screen
Object
Dictionary of information about the device’s screen, containing density, height, and width.
timezone
String
Timezones are sent as tzdata strings to add user timezone information which might be stripped from the timestamp, for example America/New_York.
groupId
String
Group / Account ID.
This is useful in B2B use cases where you need to attribute your non-group calls to a company or account. It is relied on by several Customer Success and CRM tools.
traits
Object
Dictionary of traits of the current user.
This is useful in cases where you need to track an event, but also associate information from a previous Identify call. You should fill this object the same way you would fill traits in an identify call.
userAgent
String
User agent of the device making the request.
userAgentData
Object
The user agent data of the device making the request. This always contains brands, mobile, platform, and may contain bitness, model, platformVersion,uaFullVersion, fullVersionList, wow64, if requested and available.
This populates if the Client Hints API is available on the browser.
This may contain more information than is available in the userAgent in some cases.
channel
String
where the request originated from: server, browser or mobile
This page was last modified: 12 Apr 2024
Need support?
Questions? Problems? Need more info? Contact Segment Support for assistance!
Visit our Support page
Help improve these docs!
Edit this page
Request docs change
Was this page helpful?
Yes
No
Thanks for your feedback!
Can we improve this doc? Send us feedback!
Get started with Segment
Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools.
Request Demo
or
Create free account
Edit this page
Request docs change
On this page
Example
Identities
Event
Properties
Sending Traits in a Track Call - Destination Actions
Context
Was this page helpful?
Yes
No
Thanks for your feedback!
Can we improve this doc? Send us feedback!
Product
Connections
Protocols
Twilio Engage
Integrations Catalog
Pricing
Security
GDPR
For Developers
Documentation
Segment API
Build on Segment
Open Source
Engineering Team
Company
Careers
Blog
Press
FTFY Podcast
Events
Support
Help Center
Contact us
Resources
Recipes
Security Bulletins
Become a Partner
© 2025 Segment.io, Inc.
Privacy
Terms
Website Data Collection Preferences
Send
Send
Send